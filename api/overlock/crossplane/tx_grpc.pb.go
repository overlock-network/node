// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: overlock/crossplane/tx.proto

package crossplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName        = "/overlock.crossplane.Msg/UpdateParams"
	Msg_CreateComposition_FullMethodName   = "/overlock.crossplane.Msg/CreateComposition"
	Msg_UpdateComposition_FullMethodName   = "/overlock.crossplane.Msg/UpdateComposition"
	Msg_DeleteComposition_FullMethodName   = "/overlock.crossplane.Msg/DeleteComposition"
	Msg_CreateXrd_FullMethodName           = "/overlock.crossplane.Msg/CreateXrd"
	Msg_UpdateXrd_FullMethodName           = "/overlock.crossplane.Msg/UpdateXrd"
	Msg_DeleteXrd_FullMethodName           = "/overlock.crossplane.Msg/DeleteXrd"
	Msg_CreateConfiguration_FullMethodName = "/overlock.crossplane.Msg/CreateConfiguration"
	Msg_UpdateConfiguration_FullMethodName = "/overlock.crossplane.Msg/UpdateConfiguration"
	Msg_DeleteConfiguration_FullMethodName = "/overlock.crossplane.Msg/DeleteConfiguration"
	Msg_CreateEnvironment_FullMethodName   = "/overlock.crossplane.Msg/CreateEnvironment"
	Msg_UpdateEnvironment_FullMethodName   = "/overlock.crossplane.Msg/UpdateEnvironment"
	Msg_DeleteEnvironment_FullMethodName   = "/overlock.crossplane.Msg/DeleteEnvironment"
	Msg_CreateProvider_FullMethodName      = "/overlock.crossplane.Msg/CreateProvider"
	Msg_UpdateProvider_FullMethodName      = "/overlock.crossplane.Msg/UpdateProvider"
	Msg_DeleteProvider_FullMethodName      = "/overlock.crossplane.Msg/DeleteProvider"
	Msg_CreateFunction_FullMethodName      = "/overlock.crossplane.Msg/CreateFunction"
	Msg_UpdateFunction_FullMethodName      = "/overlock.crossplane.Msg/UpdateFunction"
	Msg_DeleteFunction_FullMethodName      = "/overlock.crossplane.Msg/DeleteFunction"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateComposition
	CreateComposition(ctx context.Context, in *MsgCreateComposition, opts ...grpc.CallOption) (*MsgCreateCompositionResponse, error)
	// UpdateComposition
	UpdateComposition(ctx context.Context, in *MsgUpdateComposition, opts ...grpc.CallOption) (*MsgUpdateCompositionResponse, error)
	// DeleteComposition
	DeleteComposition(ctx context.Context, in *MsgDeleteComposition, opts ...grpc.CallOption) (*MsgDeleteCompositionResponse, error)
	// CreateXrd
	CreateXrd(ctx context.Context, in *MsgCreateXrd, opts ...grpc.CallOption) (*MsgCreateXrdResponse, error)
	// UpdateXrd
	UpdateXrd(ctx context.Context, in *MsgUpdateXrd, opts ...grpc.CallOption) (*MsgUpdateXrdResponse, error)
	// DeleteXrd
	DeleteXrd(ctx context.Context, in *MsgDeleteXrd, opts ...grpc.CallOption) (*MsgDeleteXrdResponse, error)
	// CreateConfiguration
	CreateConfiguration(ctx context.Context, in *MsgCreateConfiguration, opts ...grpc.CallOption) (*MsgCreateConfigurationResponse, error)
	// UpdateConfiguration
	UpdateConfiguration(ctx context.Context, in *MsgUpdateConfiguration, opts ...grpc.CallOption) (*MsgUpdateConfigurationResponse, error)
	// DeleteConfiguration
	DeleteConfiguration(ctx context.Context, in *MsgDeleteConfiguration, opts ...grpc.CallOption) (*MsgDeleteConfigurationResponse, error)
	// CreateEnvironment
	CreateEnvironment(ctx context.Context, in *MsgCreateEnvironment, opts ...grpc.CallOption) (*MsgCreateEnvironmentResponse, error)
	// UpdateEnvironment
	UpdateEnvironment(ctx context.Context, in *MsgUpdateEnvironment, opts ...grpc.CallOption) (*MsgUpdateEnvironmentResponse, error)
	// DeleteEnvironment
	DeleteEnvironment(ctx context.Context, in *MsgDeleteEnvironment, opts ...grpc.CallOption) (*MsgDeleteEnvironmentResponse, error)
	// CreateProvider
	CreateProvider(ctx context.Context, in *MsgCreateProvider, opts ...grpc.CallOption) (*MsgCreateProviderResponse, error)
	// UpdateProvider
	UpdateProvider(ctx context.Context, in *MsgUpdateProvider, opts ...grpc.CallOption) (*MsgUpdateProviderResponse, error)
	// DeleteProvider
	DeleteProvider(ctx context.Context, in *MsgDeleteProvider, opts ...grpc.CallOption) (*MsgDeleteProviderResponse, error)
	// CreateFunction
	CreateFunction(ctx context.Context, in *MsgCreateFunction, opts ...grpc.CallOption) (*MsgCreateFunctionResponse, error)
	// UpdateFunction
	UpdateFunction(ctx context.Context, in *MsgUpdateFunction, opts ...grpc.CallOption) (*MsgUpdateFunctionResponse, error)
	// DeleteFunction
	DeleteFunction(ctx context.Context, in *MsgDeleteFunction, opts ...grpc.CallOption) (*MsgDeleteFunctionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateComposition(ctx context.Context, in *MsgCreateComposition, opts ...grpc.CallOption) (*MsgCreateCompositionResponse, error) {
	out := new(MsgCreateCompositionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateComposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateComposition(ctx context.Context, in *MsgUpdateComposition, opts ...grpc.CallOption) (*MsgUpdateCompositionResponse, error) {
	out := new(MsgUpdateCompositionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateComposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteComposition(ctx context.Context, in *MsgDeleteComposition, opts ...grpc.CallOption) (*MsgDeleteCompositionResponse, error) {
	out := new(MsgDeleteCompositionResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteComposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateXrd(ctx context.Context, in *MsgCreateXrd, opts ...grpc.CallOption) (*MsgCreateXrdResponse, error) {
	out := new(MsgCreateXrdResponse)
	err := c.cc.Invoke(ctx, Msg_CreateXrd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateXrd(ctx context.Context, in *MsgUpdateXrd, opts ...grpc.CallOption) (*MsgUpdateXrdResponse, error) {
	out := new(MsgUpdateXrdResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateXrd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteXrd(ctx context.Context, in *MsgDeleteXrd, opts ...grpc.CallOption) (*MsgDeleteXrdResponse, error) {
	out := new(MsgDeleteXrdResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteXrd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateConfiguration(ctx context.Context, in *MsgCreateConfiguration, opts ...grpc.CallOption) (*MsgCreateConfigurationResponse, error) {
	out := new(MsgCreateConfigurationResponse)
	err := c.cc.Invoke(ctx, Msg_CreateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateConfiguration(ctx context.Context, in *MsgUpdateConfiguration, opts ...grpc.CallOption) (*MsgUpdateConfigurationResponse, error) {
	out := new(MsgUpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteConfiguration(ctx context.Context, in *MsgDeleteConfiguration, opts ...grpc.CallOption) (*MsgDeleteConfigurationResponse, error) {
	out := new(MsgDeleteConfigurationResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEnvironment(ctx context.Context, in *MsgCreateEnvironment, opts ...grpc.CallOption) (*MsgCreateEnvironmentResponse, error) {
	out := new(MsgCreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, Msg_CreateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnvironment(ctx context.Context, in *MsgUpdateEnvironment, opts ...grpc.CallOption) (*MsgUpdateEnvironmentResponse, error) {
	out := new(MsgUpdateEnvironmentResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteEnvironment(ctx context.Context, in *MsgDeleteEnvironment, opts ...grpc.CallOption) (*MsgDeleteEnvironmentResponse, error) {
	out := new(MsgDeleteEnvironmentResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateProvider(ctx context.Context, in *MsgCreateProvider, opts ...grpc.CallOption) (*MsgCreateProviderResponse, error) {
	out := new(MsgCreateProviderResponse)
	err := c.cc.Invoke(ctx, Msg_CreateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateProvider(ctx context.Context, in *MsgUpdateProvider, opts ...grpc.CallOption) (*MsgUpdateProviderResponse, error) {
	out := new(MsgUpdateProviderResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteProvider(ctx context.Context, in *MsgDeleteProvider, opts ...grpc.CallOption) (*MsgDeleteProviderResponse, error) {
	out := new(MsgDeleteProviderResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateFunction(ctx context.Context, in *MsgCreateFunction, opts ...grpc.CallOption) (*MsgCreateFunctionResponse, error) {
	out := new(MsgCreateFunctionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFunction(ctx context.Context, in *MsgUpdateFunction, opts ...grpc.CallOption) (*MsgUpdateFunctionResponse, error) {
	out := new(MsgUpdateFunctionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteFunction(ctx context.Context, in *MsgDeleteFunction, opts ...grpc.CallOption) (*MsgDeleteFunctionResponse, error) {
	out := new(MsgDeleteFunctionResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateComposition
	CreateComposition(context.Context, *MsgCreateComposition) (*MsgCreateCompositionResponse, error)
	// UpdateComposition
	UpdateComposition(context.Context, *MsgUpdateComposition) (*MsgUpdateCompositionResponse, error)
	// DeleteComposition
	DeleteComposition(context.Context, *MsgDeleteComposition) (*MsgDeleteCompositionResponse, error)
	// CreateXrd
	CreateXrd(context.Context, *MsgCreateXrd) (*MsgCreateXrdResponse, error)
	// UpdateXrd
	UpdateXrd(context.Context, *MsgUpdateXrd) (*MsgUpdateXrdResponse, error)
	// DeleteXrd
	DeleteXrd(context.Context, *MsgDeleteXrd) (*MsgDeleteXrdResponse, error)
	// CreateConfiguration
	CreateConfiguration(context.Context, *MsgCreateConfiguration) (*MsgCreateConfigurationResponse, error)
	// UpdateConfiguration
	UpdateConfiguration(context.Context, *MsgUpdateConfiguration) (*MsgUpdateConfigurationResponse, error)
	// DeleteConfiguration
	DeleteConfiguration(context.Context, *MsgDeleteConfiguration) (*MsgDeleteConfigurationResponse, error)
	// CreateEnvironment
	CreateEnvironment(context.Context, *MsgCreateEnvironment) (*MsgCreateEnvironmentResponse, error)
	// UpdateEnvironment
	UpdateEnvironment(context.Context, *MsgUpdateEnvironment) (*MsgUpdateEnvironmentResponse, error)
	// DeleteEnvironment
	DeleteEnvironment(context.Context, *MsgDeleteEnvironment) (*MsgDeleteEnvironmentResponse, error)
	// CreateProvider
	CreateProvider(context.Context, *MsgCreateProvider) (*MsgCreateProviderResponse, error)
	// UpdateProvider
	UpdateProvider(context.Context, *MsgUpdateProvider) (*MsgUpdateProviderResponse, error)
	// DeleteProvider
	DeleteProvider(context.Context, *MsgDeleteProvider) (*MsgDeleteProviderResponse, error)
	// CreateFunction
	CreateFunction(context.Context, *MsgCreateFunction) (*MsgCreateFunctionResponse, error)
	// UpdateFunction
	UpdateFunction(context.Context, *MsgUpdateFunction) (*MsgUpdateFunctionResponse, error)
	// DeleteFunction
	DeleteFunction(context.Context, *MsgDeleteFunction) (*MsgDeleteFunctionResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateComposition(context.Context, *MsgCreateComposition) (*MsgCreateCompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComposition not implemented")
}
func (UnimplementedMsgServer) UpdateComposition(context.Context, *MsgUpdateComposition) (*MsgUpdateCompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComposition not implemented")
}
func (UnimplementedMsgServer) DeleteComposition(context.Context, *MsgDeleteComposition) (*MsgDeleteCompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComposition not implemented")
}
func (UnimplementedMsgServer) CreateXrd(context.Context, *MsgCreateXrd) (*MsgCreateXrdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXrd not implemented")
}
func (UnimplementedMsgServer) UpdateXrd(context.Context, *MsgUpdateXrd) (*MsgUpdateXrdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateXrd not implemented")
}
func (UnimplementedMsgServer) DeleteXrd(context.Context, *MsgDeleteXrd) (*MsgDeleteXrdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXrd not implemented")
}
func (UnimplementedMsgServer) CreateConfiguration(context.Context, *MsgCreateConfiguration) (*MsgCreateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfiguration not implemented")
}
func (UnimplementedMsgServer) UpdateConfiguration(context.Context, *MsgUpdateConfiguration) (*MsgUpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedMsgServer) DeleteConfiguration(context.Context, *MsgDeleteConfiguration) (*MsgDeleteConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfiguration not implemented")
}
func (UnimplementedMsgServer) CreateEnvironment(context.Context, *MsgCreateEnvironment) (*MsgCreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedMsgServer) UpdateEnvironment(context.Context, *MsgUpdateEnvironment) (*MsgUpdateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedMsgServer) DeleteEnvironment(context.Context, *MsgDeleteEnvironment) (*MsgDeleteEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedMsgServer) CreateProvider(context.Context, *MsgCreateProvider) (*MsgCreateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedMsgServer) UpdateProvider(context.Context, *MsgUpdateProvider) (*MsgUpdateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedMsgServer) DeleteProvider(context.Context, *MsgDeleteProvider) (*MsgDeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedMsgServer) CreateFunction(context.Context, *MsgCreateFunction) (*MsgCreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedMsgServer) UpdateFunction(context.Context, *MsgUpdateFunction) (*MsgUpdateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedMsgServer) DeleteFunction(context.Context, *MsgDeleteFunction) (*MsgDeleteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateComposition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateComposition(ctx, req.(*MsgCreateComposition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateComposition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateComposition(ctx, req.(*MsgUpdateComposition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteComposition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteComposition(ctx, req.(*MsgDeleteComposition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateXrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateXrd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateXrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateXrd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateXrd(ctx, req.(*MsgCreateXrd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateXrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateXrd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateXrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateXrd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateXrd(ctx, req.(*MsgUpdateXrd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteXrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteXrd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteXrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteXrd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteXrd(ctx, req.(*MsgDeleteXrd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateConfiguration(ctx, req.(*MsgCreateConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateConfiguration(ctx, req.(*MsgUpdateConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteConfiguration(ctx, req.(*MsgDeleteConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEnvironment(ctx, req.(*MsgCreateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnvironment(ctx, req.(*MsgUpdateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteEnvironment(ctx, req.(*MsgDeleteEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProvider(ctx, req.(*MsgCreateProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateProvider(ctx, req.(*MsgUpdateProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteProvider(ctx, req.(*MsgDeleteProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFunction(ctx, req.(*MsgCreateFunction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFunction(ctx, req.(*MsgUpdateFunction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteFunction(ctx, req.(*MsgDeleteFunction))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overlock.crossplane.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateComposition",
			Handler:    _Msg_CreateComposition_Handler,
		},
		{
			MethodName: "UpdateComposition",
			Handler:    _Msg_UpdateComposition_Handler,
		},
		{
			MethodName: "DeleteComposition",
			Handler:    _Msg_DeleteComposition_Handler,
		},
		{
			MethodName: "CreateXrd",
			Handler:    _Msg_CreateXrd_Handler,
		},
		{
			MethodName: "UpdateXrd",
			Handler:    _Msg_UpdateXrd_Handler,
		},
		{
			MethodName: "DeleteXrd",
			Handler:    _Msg_DeleteXrd_Handler,
		},
		{
			MethodName: "CreateConfiguration",
			Handler:    _Msg_CreateConfiguration_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _Msg_UpdateConfiguration_Handler,
		},
		{
			MethodName: "DeleteConfiguration",
			Handler:    _Msg_DeleteConfiguration_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _Msg_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _Msg_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _Msg_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _Msg_CreateProvider_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _Msg_UpdateProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _Msg_DeleteProvider_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _Msg_CreateFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _Msg_UpdateFunction_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _Msg_DeleteFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overlock/crossplane/tx.proto",
}
