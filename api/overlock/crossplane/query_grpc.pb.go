// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: overlock/crossplane/query.proto

package crossplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/overlock.crossplane.Query/Params"
	Query_ShowConfiguration_FullMethodName = "/overlock.crossplane.Query/ShowConfiguration"
	Query_ListConfiguration_FullMethodName = "/overlock.crossplane.Query/ListConfiguration"
	Query_ListComposition_FullMethodName   = "/overlock.crossplane.Query/ListComposition"
	Query_ShowComposition_FullMethodName   = "/overlock.crossplane.Query/ShowComposition"
	Query_ShowXrd_FullMethodName           = "/overlock.crossplane.Query/ShowXrd"
	Query_ListXrd_FullMethodName           = "/overlock.crossplane.Query/ListXrd"
	Query_ShowEnvironment_FullMethodName   = "/overlock.crossplane.Query/ShowEnvironment"
	Query_ListEnvironment_FullMethodName   = "/overlock.crossplane.Query/ListEnvironment"
	Query_ShowProvider_FullMethodName      = "/overlock.crossplane.Query/ShowProvider"
	Query_ListProvider_FullMethodName      = "/overlock.crossplane.Query/ListProvider"
	Query_ListFunction_FullMethodName      = "/overlock.crossplane.Query/ListFunction"
	Query_ShowFunction_FullMethodName      = "/overlock.crossplane.Query/ShowFunction"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ShowConfiguration items.
	ShowConfiguration(ctx context.Context, in *QueryShowConfigurationRequest, opts ...grpc.CallOption) (*QueryShowConfigurationResponse, error)
	// Queries a list of ListConfiguration items.
	ListConfiguration(ctx context.Context, in *QueryListConfigurationRequest, opts ...grpc.CallOption) (*QueryListConfigurationResponse, error)
	// Queries a list of ListComposition items.
	ListComposition(ctx context.Context, in *QueryListCompositionRequest, opts ...grpc.CallOption) (*QueryListCompositionResponse, error)
	// Queries a list of ShowComposition items.
	ShowComposition(ctx context.Context, in *QueryShowCompositionRequest, opts ...grpc.CallOption) (*QueryShowCompositionResponse, error)
	// Queries a list of ShowXrd items.
	ShowXrd(ctx context.Context, in *QueryShowXrdRequest, opts ...grpc.CallOption) (*QueryShowXrdResponse, error)
	// Queries a list of ListXrd items.
	ListXrd(ctx context.Context, in *QueryListXrdRequest, opts ...grpc.CallOption) (*QueryListXrdResponse, error)
	// Queries a list of ShowEnvironment items.
	ShowEnvironment(ctx context.Context, in *QueryShowEnvironmentRequest, opts ...grpc.CallOption) (*QueryShowEnvironmentResponse, error)
	// Queries a list of ListEnvironment items.
	ListEnvironment(ctx context.Context, in *QueryListEnvironmentRequest, opts ...grpc.CallOption) (*QueryListEnvironmentResponse, error)
	// Queries a list of ShowProvider items.
	ShowProvider(ctx context.Context, in *QueryShowProviderRequest, opts ...grpc.CallOption) (*QueryShowProviderResponse, error)
	// Queries a list of ListProvider items.
	ListProvider(ctx context.Context, in *QueryListProviderRequest, opts ...grpc.CallOption) (*QueryListProviderResponse, error)
	// Queries a list of ListFunction items.
	ListFunction(ctx context.Context, in *QueryListFunctionRequest, opts ...grpc.CallOption) (*QueryListFunctionResponse, error)
	// Queries a list of ShowFunction items.
	ShowFunction(ctx context.Context, in *QueryShowFunctionRequest, opts ...grpc.CallOption) (*QueryShowFunctionResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowConfiguration(ctx context.Context, in *QueryShowConfigurationRequest, opts ...grpc.CallOption) (*QueryShowConfigurationResponse, error) {
	out := new(QueryShowConfigurationResponse)
	err := c.cc.Invoke(ctx, Query_ShowConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListConfiguration(ctx context.Context, in *QueryListConfigurationRequest, opts ...grpc.CallOption) (*QueryListConfigurationResponse, error) {
	out := new(QueryListConfigurationResponse)
	err := c.cc.Invoke(ctx, Query_ListConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListComposition(ctx context.Context, in *QueryListCompositionRequest, opts ...grpc.CallOption) (*QueryListCompositionResponse, error) {
	out := new(QueryListCompositionResponse)
	err := c.cc.Invoke(ctx, Query_ListComposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowComposition(ctx context.Context, in *QueryShowCompositionRequest, opts ...grpc.CallOption) (*QueryShowCompositionResponse, error) {
	out := new(QueryShowCompositionResponse)
	err := c.cc.Invoke(ctx, Query_ShowComposition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowXrd(ctx context.Context, in *QueryShowXrdRequest, opts ...grpc.CallOption) (*QueryShowXrdResponse, error) {
	out := new(QueryShowXrdResponse)
	err := c.cc.Invoke(ctx, Query_ShowXrd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListXrd(ctx context.Context, in *QueryListXrdRequest, opts ...grpc.CallOption) (*QueryListXrdResponse, error) {
	out := new(QueryListXrdResponse)
	err := c.cc.Invoke(ctx, Query_ListXrd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowEnvironment(ctx context.Context, in *QueryShowEnvironmentRequest, opts ...grpc.CallOption) (*QueryShowEnvironmentResponse, error) {
	out := new(QueryShowEnvironmentResponse)
	err := c.cc.Invoke(ctx, Query_ShowEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListEnvironment(ctx context.Context, in *QueryListEnvironmentRequest, opts ...grpc.CallOption) (*QueryListEnvironmentResponse, error) {
	out := new(QueryListEnvironmentResponse)
	err := c.cc.Invoke(ctx, Query_ListEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowProvider(ctx context.Context, in *QueryShowProviderRequest, opts ...grpc.CallOption) (*QueryShowProviderResponse, error) {
	out := new(QueryShowProviderResponse)
	err := c.cc.Invoke(ctx, Query_ShowProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProvider(ctx context.Context, in *QueryListProviderRequest, opts ...grpc.CallOption) (*QueryListProviderResponse, error) {
	out := new(QueryListProviderResponse)
	err := c.cc.Invoke(ctx, Query_ListProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListFunction(ctx context.Context, in *QueryListFunctionRequest, opts ...grpc.CallOption) (*QueryListFunctionResponse, error) {
	out := new(QueryListFunctionResponse)
	err := c.cc.Invoke(ctx, Query_ListFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowFunction(ctx context.Context, in *QueryShowFunctionRequest, opts ...grpc.CallOption) (*QueryShowFunctionResponse, error) {
	out := new(QueryShowFunctionResponse)
	err := c.cc.Invoke(ctx, Query_ShowFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ShowConfiguration items.
	ShowConfiguration(context.Context, *QueryShowConfigurationRequest) (*QueryShowConfigurationResponse, error)
	// Queries a list of ListConfiguration items.
	ListConfiguration(context.Context, *QueryListConfigurationRequest) (*QueryListConfigurationResponse, error)
	// Queries a list of ListComposition items.
	ListComposition(context.Context, *QueryListCompositionRequest) (*QueryListCompositionResponse, error)
	// Queries a list of ShowComposition items.
	ShowComposition(context.Context, *QueryShowCompositionRequest) (*QueryShowCompositionResponse, error)
	// Queries a list of ShowXrd items.
	ShowXrd(context.Context, *QueryShowXrdRequest) (*QueryShowXrdResponse, error)
	// Queries a list of ListXrd items.
	ListXrd(context.Context, *QueryListXrdRequest) (*QueryListXrdResponse, error)
	// Queries a list of ShowEnvironment items.
	ShowEnvironment(context.Context, *QueryShowEnvironmentRequest) (*QueryShowEnvironmentResponse, error)
	// Queries a list of ListEnvironment items.
	ListEnvironment(context.Context, *QueryListEnvironmentRequest) (*QueryListEnvironmentResponse, error)
	// Queries a list of ShowProvider items.
	ShowProvider(context.Context, *QueryShowProviderRequest) (*QueryShowProviderResponse, error)
	// Queries a list of ListProvider items.
	ListProvider(context.Context, *QueryListProviderRequest) (*QueryListProviderResponse, error)
	// Queries a list of ListFunction items.
	ListFunction(context.Context, *QueryListFunctionRequest) (*QueryListFunctionResponse, error)
	// Queries a list of ShowFunction items.
	ShowFunction(context.Context, *QueryShowFunctionRequest) (*QueryShowFunctionResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ShowConfiguration(context.Context, *QueryShowConfigurationRequest) (*QueryShowConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfiguration not implemented")
}
func (UnimplementedQueryServer) ListConfiguration(context.Context, *QueryListConfigurationRequest) (*QueryListConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfiguration not implemented")
}
func (UnimplementedQueryServer) ListComposition(context.Context, *QueryListCompositionRequest) (*QueryListCompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComposition not implemented")
}
func (UnimplementedQueryServer) ShowComposition(context.Context, *QueryShowCompositionRequest) (*QueryShowCompositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowComposition not implemented")
}
func (UnimplementedQueryServer) ShowXrd(context.Context, *QueryShowXrdRequest) (*QueryShowXrdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowXrd not implemented")
}
func (UnimplementedQueryServer) ListXrd(context.Context, *QueryListXrdRequest) (*QueryListXrdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXrd not implemented")
}
func (UnimplementedQueryServer) ShowEnvironment(context.Context, *QueryShowEnvironmentRequest) (*QueryShowEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEnvironment not implemented")
}
func (UnimplementedQueryServer) ListEnvironment(context.Context, *QueryListEnvironmentRequest) (*QueryListEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironment not implemented")
}
func (UnimplementedQueryServer) ShowProvider(context.Context, *QueryShowProviderRequest) (*QueryShowProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowProvider not implemented")
}
func (UnimplementedQueryServer) ListProvider(context.Context, *QueryListProviderRequest) (*QueryListProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvider not implemented")
}
func (UnimplementedQueryServer) ListFunction(context.Context, *QueryListFunctionRequest) (*QueryListFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFunction not implemented")
}
func (UnimplementedQueryServer) ShowFunction(context.Context, *QueryShowFunctionRequest) (*QueryShowFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFunction not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowConfiguration(ctx, req.(*QueryShowConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListConfiguration(ctx, req.(*QueryListConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListComposition(ctx, req.(*QueryListCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowComposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowCompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowComposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowComposition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowComposition(ctx, req.(*QueryShowCompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowXrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowXrdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowXrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowXrd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowXrd(ctx, req.(*QueryShowXrdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListXrd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListXrdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListXrd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListXrd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListXrd(ctx, req.(*QueryListXrdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowEnvironment(ctx, req.(*QueryShowEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListEnvironment(ctx, req.(*QueryListEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowProvider(ctx, req.(*QueryShowProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProvider(ctx, req.(*QueryListProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListFunction(ctx, req.(*QueryListFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowFunction(ctx, req.(*QueryShowFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overlock.crossplane.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ShowConfiguration",
			Handler:    _Query_ShowConfiguration_Handler,
		},
		{
			MethodName: "ListConfiguration",
			Handler:    _Query_ListConfiguration_Handler,
		},
		{
			MethodName: "ListComposition",
			Handler:    _Query_ListComposition_Handler,
		},
		{
			MethodName: "ShowComposition",
			Handler:    _Query_ShowComposition_Handler,
		},
		{
			MethodName: "ShowXrd",
			Handler:    _Query_ShowXrd_Handler,
		},
		{
			MethodName: "ListXrd",
			Handler:    _Query_ListXrd_Handler,
		},
		{
			MethodName: "ShowEnvironment",
			Handler:    _Query_ShowEnvironment_Handler,
		},
		{
			MethodName: "ListEnvironment",
			Handler:    _Query_ListEnvironment_Handler,
		},
		{
			MethodName: "ShowProvider",
			Handler:    _Query_ShowProvider_Handler,
		},
		{
			MethodName: "ListProvider",
			Handler:    _Query_ListProvider_Handler,
		},
		{
			MethodName: "ListFunction",
			Handler:    _Query_ListFunction_Handler,
		},
		{
			MethodName: "ShowFunction",
			Handler:    _Query_ShowFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overlock/crossplane/query.proto",
}
